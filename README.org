#+title: Readme

* Chatbot
A clone of ChatGPT's interface.

* History
** Day 1: Auth
:LOGBOOK:
CLOCK: [2025-09-29 Mon 13:32]--[2025-09-29 Mon 13:46] =>  0:14
CLOCK: [2025-09-29 Mon 11:53]--[2025-09-29 Mon 12:28] =>  0:35
:END:


*** Timetracking
- arrive late 9:30 >_>
- pom 0: 9:50 - 11:30 complete saturday's EoD and try to draft a blog post. why the heck did this take two hours?
- pom 1: Init react-router; setup drizzle/db; config better-auth.
- 12:30 - 1:30: lunch
- pom 2: finalize file structure; complete better-auth config.
- 2 - 2:30: 1:1 w paris

day 2
- pom 3
- [X] Completed the [[file:~/Documents/org/30-fractal/address-book/README.org][Tutorial]], reviewed my understanding with a [[file:~/Documents/org/30-fractal/convos/20250930--react-router__quiz.org][quiz]]

pom 6:
*** PR 1: Project init
React-router template creation
Create Supabase DB & connect
Modify package.json
Install Better Auth

*** PR 2: Config Better Auth
- set up =.env= vars
- create files:
  - =app/lib/auth.ts=
  - =app/lib/drizzle.ts=
  - =app/db/schema.ts=
- [X] config w drizzle :: set up with drizzle adapter & email/password config
  https://www.better-auth.com/docs/authentication/email-password
- create DB tables
  #+begin_example bash
# set up drizzle.config.ts to point to auth-schema.ts
bun run s-push
# bunx drizzle-kit push
  #+end_example
*** PR 3: Handle auth routes
https://www.better-auth.com/docs/installation#mount-handler
** Day 2: Set up BetterAuth
:LOGBOOK:
CLOCK: [2025-09-30 Tue 17:50]--[2025-09-30 Tue 18:56] =>  1:06
:END:
I'll steal the sidebar :)
Time logged in the address-book repo.

- poms 1 - 5 :: React Router Tutorial, self-quizzing
- 3:50 - 4:30 :: look into merging tutorial repo w/ this one
- 4:30 - 5:40 :: relax?
- poms 6-7, 5:50 - 6:50 :: complete betterauth setup, push PR

** Day 3: Shadcn, AxLLM, Sidebar
:LOGBOOK:
CLOCK: [2025-10-01 Wed 23:50]--[2025-10-02 Thu 00:33] =>  0:43
CLOCK: [2025-10-01 Wed 23:00]--[2025-10-01 Wed 23:50] =>  0:50
CLOCK: [2025-10-01 Wed 22:30]--[2025-10-01 Wed 23:00] =>  0:30
CLOCK: [2025-10-01 Wed 10:38]--[2025-10-01 Wed 11:19] =>  0:25
:END:
- 9 - 10:00 :: chat, setup, research AxLLM.
- 10 - 10:30 :: plan out the day
- pom 1 :: Sketching on paper.
- pom 1b :: more sketching on routes
- 11:20 - 12:20 :: start sketching in figma the page structure; inspiration hits!
- 12:20 - 1 :: send off email to leon; lunch
- 1 - 2 :: mark lecture on internal story and narrative
- 2 - 2:50 :: brainstorm story generation logic; talk about
- 2:50 - 3:30 :: i forget
- 3:30 - 3:50 :: install shadcn and look at docs
- 3:50 - 4:20 :: lay out the plan for coachbot
- 4:20 - 4:40 :: take some time away to try and focus.
- 4:40 - 5:40 :: experiment with Sora 2 and test video generation with story structure.
- 5:40 - 6:50 :: grab food & eat
- 6:50 - 7:30 :: chat with russel, update time log
- 7:30 - 9:40 :: uhhh. hm. thinking about data structures and workflows. probably ineffective.
- 9:40 - 10:30 :: reorienting myself again. attempt to do the goddamn thing. I need to make a new page and a route.
- pom 3 10:30  - 11:00 :: implement signout
- pom 3 11 - 11:50 :: install shadcn components and implement narrative routes inside of a sidebar
- pom 4 11:50 - 12:30 :: Install AxLLM and add a model response to home page

*** PR 1: Protected Landing page and Chat
Login details

walerie
walerie@example.com
waleriepass


*** DONE PR: ShadCN install
*** DONE PR: Sidebar + routing
*** DONE PR: AxLLM simple call

** Day 4
:LOGBOOK:
CLOCK: [2025-10-02 Thu 22:40]--[2025-10-03 Fri 00:16] =>  1:36
CLOCK: [2025-10-02 Thu 20:12]--[2025-10-02 Thu 22:32] =>  2:20
CLOCK: [2025-10-02 Thu 17:35]--[2025-10-02 Thu 18:35] =>  1:00
CLOCK: [2025-10-02 Thu 15:58]--[2025-10-02 Thu 16:23] =>  0:25
CLOCK: [2025-10-02 Thu 12:40]--[2025-10-02 Thu 13:50] =>  1:10
:END:
- 9 - 9:30 :: get oriented and setup
- 9:30 - 10:50 :: examine source material & explore shadcn components; chat with deepseek about story structures.
- pom 1 10:50 - 11:30 :: talk with Paris; talk to deepseek v1
- 11:30 - 12:40 :: lunch with russel
- pom 2 12:40 - 1:50 :: Hardcode an example
- pom 3 :: examine Ax docs to figure out how to make new task types / add examples.
- 2 - 3 :: nap
- 3 - 4 :: further clarify AxDocs; deepwiki.com is pretty great!
- pom 4-6 4 - 5:30 :: Import data of Quest story structures, run some tests.
- pom 6-7 5:30 - 6:30 :: Research DSPy /Ax prompt optimizer =GEPA=, begin preparing augmented data structures and optimizer run
- 6:30 - 7 :: laze around
- 7 - 8 :: Manual data preparation
- pom 8-11 8:10 - 10:30 :: Clean and prepare 30 examples!!
- pom 12-14 :: Finalize data cleaning, sketch out remaining tasks ðŸ˜«

*** With 5 few-shot in-prompt examples
I am very much unsatisfied with the creative writing quality of this system. There are a number of approaches I think will help.
- GEPA optimizer to add story and structure understanding
- Preparation of more data samples
- Incorporation of roleplay prompts

*** Remaining Work

So what we have right now is 34 examples which can serve as exemplar or evals or a few-shot pool, and then we also have right now an idea of a workflow.
Workflows B and C may need to sit aside for another week since I must finish my UI for tomorrow which I haven't really gotten started on. I know I will most likely need to display the story beats on a Table.
**** Overall Workflow
The product idea that I have at the moment is to take the user's
- character information, which could also be about a product, for example. This serves also as starting point, potentially.
- the central imbalance
- the user's selection of story structure, possibly. I think it's best for users to choose for educational purposes.

And eventually make a video script. I could market it as story generation for startup launch videos.

**** Workflow A
The product idea that I have at the moment is to take the user's
- character information, which could also be about a product, for example. This serves also as starting point, potentially.
- the central imbalance
- the user's selection of story structure, possibly. I think it's best for users to choose for educational purposes.
Output:
- provide a "bare bones" list of story beats that conform to the user details and story framework.


**** Workflow B
Once we have that down I want for users to be able to *play with* the expansion and contraction of stories for Workflow B. But that is a separate step, which will require an entirely different signature, optimization run, and also additional data augmentation of our exemplars.

**** Then Workflow C, I want to take that snapshot of story state/structure and turn it into a video script.


** Day 5
:LOGBOOK:
CLOCK: [2025-10-03 Fri 14:15]--[2025-10-03 Fri 15:04] =>  0:49
CLOCK: [2025-10-03 Fri 13:20]--[2025-10-03 Fri 14:05] =>  0:45
CLOCK: [2025-10-03 Fri 12:03]--[2025-10-03 Fri 12:28] =>  0:25
CLOCK: [2025-10-03 Fri 10:45]--[2025-10-03 Fri 11:55] =>  1:10
CLOCK: [2025-10-03 Fri 10:00]--[2025-10-03 Fri 10:27] =>  0:27
:END:

*** Timetracking
- 9:30 :: arrive late >_>
- 9:30 - 10:00 :: get oriented, have a look thru https://deepwiki.com/remix-run/react-router/
- pom 1 :: set up repo, plan out today's PRs
- 10:30 - 10:45 :: talk w paris
- pom 2 :: Reconsider terminology, rename, finalize route layout. I feel like this is bikeshedding but I also do need the clarity.
- pom 3 :: set up routes; fix some redirect.
- 12:30 - 1:20 :: lunch
- pom 4 ::  Start on sidebar navigation, display input form.
- pom 5 :: attempt to display data and display custom font;

*** DONE Finalize Routes

#+begin_example
/ - public landing page
/login - auth
/signup - auth -> redirects to /login on success
/logout - clears session -> redirects to /

/scribe - dashboard (shows list of existing projects + "new" button)
/scribe/new - creation form -> redirects to /scribe/:id on submit
/scribe/:id - main workspace (shows bare_bones_sequence table + sidebar)
/scribe/:id/v/:version - version history view

/scribe/:id/patterning - workflow b (expansion/contraction)
/scribe/:id/narrative - workflow c (video script generation)
#+end_example

the key insight is treating =:id= as the core project identifier and hanging everything else off it. no more double-param confusion.

*** Basic Elements to every major page

*** PR: Display Table Component

*** PR: Sidebar Navigation?
And display an input form.

*** PR: Interactivity with Sidebar

*** PR: Separate Test/Train Dataset

*** PR: Prepare Optimizer Example

** Day 6: Demo Day
:LOGBOOK:
CLOCK: [2025-10-04 Sat 10:40]--[2025-10-04 Sat 14:10] =>  3:30
CLOCK: [2025-10-04 Sat 10:15]--[2025-10-04 Sat 10:40] =>  0:25
:END:
  - [X] Firstly is actually hooking up the form and input button into the generator, and then hooking the generator's output into the table, and of course making sure that the routing works. I think that's totally feasible in a couple of hours, so I'm ready for the demo.
  - Second task is to take all the data that I have and at least prepare enough of the optimizer workflow so that I can also present that at the demo, because I am so excited about this.

*** Time Tracking
- Get that shit done!! (got it fully working at 2:10 >_>)

*** DONE PR Hook up the Input to the Generator
*** DONE PR Hook up the Generator to the Sheet

*** PR Run the Optimizer and use it

* Welcome to React Router!
A modern, production-ready template for building full-stack React applications using React Router.

[[file:app/README.md][See app/README.md]]
